{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MERCEDES BENZ GREENER MANUFACTURERING \n",
    "## Udacity MLND Capstone Project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Definition\n",
    "#### Project Overview\n",
    "In this project we will explore a competition presented by Daimler Mercedes Benz on Kaggle.com. \n",
    "\n",
    "The link to the competition is here : https://www.kaggle.com/c/mercedes-benz-greener-manufacturing\n",
    "\n",
    "The competition is hosted by Daimler Mercedes Benz they are an automotive company. As their cars have a huge variety in models and specification it takes different times to test all the features and options. In this challenge they would like Kagglers to predict the time it would take on the test bench for given features and options. This will \"contribute to speedier testing, resulting in lower carbon dioxide emissions without reducing Daimlerâ€™s standards.\"\n",
    "\n",
    "#### Problem Statement\n",
    "The problem presented as mentioned earlier is to reduce the time cars spend on the test bench therefore resulting in faster testing and lower carbon dioxide emissions. There are many different features presented each affecting the time on the test bench, this is due the the many selections of options available for each car presented.\n",
    "\n",
    "The main thing here is the prediction of time on the test bench given the features selected by the customers. Given this problem we would use regression techniques for this problem as the prediction 'y' is time values which is continuous data.\n",
    "\n",
    "#### Metrics\n",
    "The metrics used to evaluate the problem is the R Squared value, this is due to the restriction to testing the model through kaggle and their metric uses R Squared. But also since this is a regression problem in essence the use of R Squared is suitable for the testing. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis\n",
    "#### Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4209, 378)\n",
      "(4209, 377)\n",
      "   ID       y  X0 X1  X2 X3 X4 X5 X6 X8  ...   X375  X376  X377  X378  X379  \\\n",
      "0   0  130.81   k  v  at  a  d  u  j  o  ...      0     0     1     0     0   \n",
      "1   6   88.53   k  t  av  e  d  y  l  o  ...      1     0     0     0     0   \n",
      "2   7   76.26  az  w   n  c  d  x  j  x  ...      0     0     0     0     0   \n",
      "3   9   80.62  az  t   n  f  d  x  l  e  ...      0     0     0     0     0   \n",
      "4  13   78.02  az  v   n  f  d  h  d  n  ...      0     0     0     0     0   \n",
      "\n",
      "   X380  X382  X383  X384  X385  \n",
      "0     0     0     0     0     0  \n",
      "1     0     0     0     0     0  \n",
      "2     0     1     0     0     0  \n",
      "3     0     0     0     0     0  \n",
      "4     0     0     0     0     0  \n",
      "\n",
      "[5 rows x 378 columns]\n"
     ]
    }
   ],
   "source": [
    "#Import both train and test csvs as panda dataframes \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "train = pd.read_csv('train.csv', sep =',')\n",
    "test = pd.read_csv('test.csv', sep=',')\n",
    "\n",
    "#Describes both CSV's dimensions\n",
    "print train.shape\n",
    "print test.shape\n",
    "print train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Column Type</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>int64</td>\n",
       "      <td>369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>float64</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>object</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Column Type  Count\n",
       "0       int64    369\n",
       "1     float64      1\n",
       "2      object      8"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtype = train.dtypes.reset_index()\n",
    "dtype.columns = [\"Count\", \"Column Type\"]\n",
    "dtype.groupby(\"Column Type\").aggregate('count').reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Train data set has 4209 rows and 378 columns.\n",
    "\n",
    "2. Test data set has 4209 rows and 377 columns, one columns less due to the missing 'y' column which we are trying to predict\n",
    "\n",
    "We can see that majority of the columns are integers and there are 8 columns with objects, those are X0,X1,X2,X3,X4,X5,X6,X8.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    4209.000000\n",
      "mean      100.669318\n",
      "std        12.679381\n",
      "min        72.110000\n",
      "25%        90.820000\n",
      "50%        99.150000\n",
      "75%       109.010000\n",
      "max       265.320000\n",
      "Name: y, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print (train['y'].describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take a look deper into the train dataset as we will be using it to train our algorithms. First we explore the 'y' value or the time value we would try to predict. There are 4209 rows as mentioned and the mean is 100.669318 as mentioned before in the proposal, this would be one of the benchmarks we use. \n",
    "\n",
    "We can see the standard deviation is not a massively large number and we see the lower 25 percentile and upper 75 percentile is 90.82 and 109.01. Meaning that predictions will stay relatively close to the mean and therefore I think would be a good benchmark to use. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exploratory Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10d082910>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.scatter(range(train.shape[0]),train['y'])\n",
    "plt.ylabel('y')\n",
    "plt.xlabel('index')\n",
    "plt.title('y Distribution in scatter graph')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the above diagram shows the distribution of the 'y' values in the training data. As we can see that the previous observation of majority of values staying between ~90 to ~110 is fairly accurate. There seems to be one outlier here in terms of 'y' value and that would be the max value. The representation seems a little vague and does not provide a clear indication of values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAt0AAAHwCAYAAAB67dOHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3X+cZXdZJ/jPI0FAGyEM2IYk2EGDLwNZo/SgM65ut4hk\nCQLOjBgX2QTQOCv+WuOPgLpG3MxER3QHEZ1oWCJBmogwRCIqRFrEFWPCgCFBhgw0kjaEAUKgETMm\nPPvHPQ2Vpqq6+nZ961ZXv9+vV73q3u8959znPn3q9KdOfe+51d0BAADG+YJFFwAAAFud0A0AAIMJ\n3QAAMJjQDQAAgwndAAAwmNANAACDCd3Aca+qfrOqfnadtvWIqjpQVfeZ7u+tqu9dj21P23tDVZ23\nXttbst1168EK2x9SN8CxolynG9jKqmpfku1J7k5yT5Kbk/xOksu6+zNzbOt7u/tNR7DO3iRXdvdv\nH8lzTetenOQru/t7jnTdjbTca6yqXdPYKUe4rU5yenffsq5FAiyYM93A8eDbu/uBSb48yaVJfirJ\n5ev9JFV1wnpvk/Xj3wdYJKEbOKZU1U9U1e8fMvaiqvqPh1u3u+/s7quTfFeS86rqMdP6L6uq/3u6\n/dCqen1VfbyqPlZVf15VX1BVL0/yiCR/ME0f+cmq2lFVXVXPqaq/S/KnS8aWBryvqKrrquoTVfW6\nqnrI9Fy7qurWQ17Lvqr61qo6O8nzk3zX9HzvnB7/7HSVqa6fqaoPVNWHq+p3qupB02MH6zivqv6u\nqj5SVT+9Sl+X9mBXVd1aVRdO272tqp51uP6u5pC6v7Kq/qyq7pzqetU0/pZp8XdOr/m7pvHvq6pb\npn+Pq6vq4Uu2+21V9Z5pWy+Ztnvwec6vqr+oql+tqo8mubiqvqKq/rSqPjo99yuq6sGH9P8nqupv\nqupTVXV5VW2fpsd8sqreVFUnHk0vgOOT0A0ca65McvbBoDSF23MzmzKyJt19XZJbk3zTMg9fOD32\nsMympTx/tko/M8nfZXbWfFt3/9KSdf6XJF+d5IkrPOX/nuTZSU7KbJrLi9ZQ4x8l+XdJXjU939cs\ns9j509fuJI9Msi3Jiw9Z5n9O8lVJHp/k/6qqrz7cc0++LMmDkpyc5DlJfn0dw+YvJPmTJCcmOSXJ\nryVJd3/z9PjXTK/5VVX1LUn+fZKnZ9a/DyTZk8x+QUry6iTPS/LPkrwnyb885Lm+Psn7Mvu3vCRJ\nTdt7eGb/ZqcmufiQdf51kickeVSSb0/yhsz2g4dl9v/mDx/l6weOQ0I3cEzp7tuSvCXJd05DZyf5\nSHffcISb+vskD1lm/J8yC3df3t3/1N1/3od/88vF3f2p7v70Co+/vLvf1d2fSvKzSZ5+8I2WR+kZ\nSX6lu9/X3QcyC5/nHnKW/ee7+9Pd/c4k70yyXHhfzj8lecHUgz9MciCz8L6SF01/Hfh4VX08yesP\ns+0vT/Lw7v7H7n7rKss+I8lLu/vt3X1XZq/xX1TVjiRPSnJTd7+muw/+MvOhQ9b/++7+te6+e+rD\nLd39xu6+q7v/e5JfyeyXpqV+rbtv7+79Sf48yV9193/p7n9M8tokX7tKvQDLErqBY9EVSQ6+ufB7\nkrx8jm2cnORjy4z/hyS3JPmTqnpfVV20hm198Age/0CS+yZ56JqqXN3Dp+0t3fYJmZ3VPWhpCP2H\nzM6Gr8VHpyC71nV/uLsffPAryZNXWfYnMzvjfF1V3VRVz15l2Xu9xumXi49m9u/38Czp7fTL0a2H\nrH+vf5tpqsieqtpfVZ/I7C8nh/5b3L7k9qeXub/WHgJ8ltANHIv+c5L/aZqT/eQkrziSlavqn2cW\n2j7vDGt3f7K7L+zuRyZ5SpIfq6rHH3x4hU0e7kz4qUtuPyKzM70fSfKpJF+0pK77ZDaFYa3b/fvM\nzhgv3fbduXdI3HS6+0Pd/X3d/fAk35/kJVX1lSssfq/XWFVfnNlUkv1JbstsesrBx2rp/YNPd8j9\nfzeNndndX5LZL211FC8HYE2EbuCYM/2Z/9VJfjfJdd39d2tZr6q+pKqenNmc4Cu7+8Zllnny9Ea/\nSnJnZpcZPHhpwdszmzt9pL6nqs6oqi9K8oIkr+7ue5L81yT3r6pzquq+SX4myf2WrHd7kh1VtdKx\n+pVJ/s+qOq2qtuVzc8DvXmH5TaGqvrOqDobjOzILwSv1+JVJnlVVZ1XV/TJ7jX/V3fuSXJPkzKp6\n2jSl5rmZzUVfzQMzmypzZ1WdnOQn1uM1ARyO0A0cq65IcmbWNrXkD6rqk5lNNfjpzObxrnQ1jtOT\nvCmzYPaXSV7S3W+eHvv3SX5mmrf840dQ68uTvCyzqR73z/RGvO6+M8kPJPntzM7cfir3nh7xe9P3\nj1bV25fZ7kunbb8lyfuT/GOSHzqCuhblnyf5q6o6kOTqJD/S3e+bHrs4yRVTj58+XRP9Z5P8fmZn\ntr8iszfOprs/ktnc/l/KbMrJGUmuT3LXKs/980m+LrNfqK5J8pr1fWkAy/PhOMAxqaoekeRvk3xZ\nd39i0fWweNNfBG5N8owlvygBbArOdAPHnClc/ViSPQL38a2qnlhVD56mnjw/s/nZb1twWQCfx6dz\nAceU6Y10t2d2RYuzF1wOi/cvMpvb/4VJbk7ytFUu3QiwMKaXAADAYKaXAADAYEI3AAAMdkzP6X7o\nQx/aO3bsWHQZK/rUpz6VL/7iL150GcckvZuPvs1P7+and/PTu/no2/z0bn433HDDR7r7YYdfcnnH\ndOjesWNHrr/++kWXsaK9e/dm165diy7jmKR389G3+end/PRufno3H32bn97Nr6o+cDTrm14CAACD\nCd0AADCY0A0AAIMJ3QAAMJjQDQAAgwndAAAwmNANAACDCd0AADCY0A0AAIMJ3QAAMJjQDQAAgwnd\nAAAwmNANAACDCd0AADCY0A0AAIMJ3QAAMJjQDQAAgwndAAAwmNANAACDnbDoAth8dlx0zbLj+y49\nZ4MrAQDYGpzpBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDB\nhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRu\nAAAYTOgGAIDBThj9BFV1nyTXJ9nf3U+uqockeVWSHUn2JXl6d98xLfu8JM9Jck+SH+7uPx5d3/Fq\nx0XXLLoEAIDjxkac6f6RJO9ecv+iJNd29+lJrp3up6rOSHJukkcnOTvJS6bADgAAx7ShobuqTkly\nTpLfXjL81CRXTLevSPK0JeN7uvuu7n5/kluSPG5kfQAAsBFGn+n+f5L8ZJLPLBnb3t23Tbc/lGT7\ndPvkJB9cstyt0xgAABzTqrvHbLjqyUme1N0/UFW7kvz4NKf749394CXL3dHdJ1bVi5O8rbuvnMYv\nT/KG7n71Idu9IMkFSbJ9+/bH7tmzZ0j96+HAgQPZtm3bostY1o377zzidc48+UEDKlneZu7dZqZv\n89O7+end/PRuPvo2P72b3+7du2/o7p3zrj/yjZTfmOQpVfWkJPdP8iVVdWWS26vqpO6+rapOSvLh\nafn9SU5dsv4p09i9dPdlSS5Lkp07d/auXbsGvoSjs3fv3mzW+s6f442U+56xa/0LWcFm7t1mpm/z\n07v56d389G4++jY/vVucYdNLuvt53X1Kd+/I7A2Sf9rd35Pk6iTnTYudl+R10+2rk5xbVferqtOS\nnJ7kulH1AQDARhl+ycBlXJrkqqp6TpIPJHl6knT3TVV1VZKbk9yd5Lndfc8C6gMAgHW1IaG7u/cm\n2Tvd/miSx6+w3CVJLtmImgAAYKP4REoAABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4A\nABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAY\nTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzo\nBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYA\ngMGEbgAAGEzoBgCAwYaF7qq6f1VdV1XvrKqbqurnp/GLq2p/Vb1j+nrSknWeV1W3VNV7quqJo2oD\nAICNdMLAbd+V5Fu6+0BV3TfJW6vqDdNjv9rdv7x04ao6I8m5SR6d5OFJ3lRVj+ruewbWCAAAww07\n090zB6a7952+epVVnppkT3ff1d3vT3JLkseNqg8AADZKda+Wg49y41X3SXJDkq9M8uvd/VNVdXGS\nZyW5M8n1SS7s7juq6sVJ3tbdV07rXp7kDd396kO2eUGSC5Jk+/btj92zZ8+w+o/WgQMHsm3btkWX\nsawb9995xOucefKDBlSyvM3cu81M3+and/PTu/np3Xz0bX56N7/du3ff0N07511/5PSSTFNDzqqq\nByd5bVU9JslvJPmFzM56/0KSFyZ59hFs87IklyXJzp07e9euXetd9rrZu3dvNmt95190zRGvs+8Z\nu9a/kBVs5t5tZvo2P72bn97NT+/mo2/z07vF2ZCrl3T3x5O8OcnZ3X17d9/T3Z9J8lv53BSS/UlO\nXbLaKdMYAAAc00ZeveRh0xnuVNUDkjwhyd9W1UlLFvuOJO+abl+d5Nyqul9VnZbk9CTXjaoPAAA2\nysjpJScluWKa1/0FSa7q7tdX1cur6qzMppfsS/L9SdLdN1XVVUluTnJ3kue6cgkAAFvBsNDd3X+T\n5GuXGX/mKutckuSSUTUBAMAi+ERKAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAY\nTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzo\nBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYA\ngMGEbgAAGOyERRfAsWPHRdcsO77v0nM2uBIAgGOLM90AADCY0A0AAIMJ3QAAMJjQDQAAgwndAAAw\nmNANAACDCd0AADCY0A0AAIMJ3QAAMNiw0F1V96+q66rqnVV1U1X9/DT+kKp6Y1W9d/p+4pJ1nldV\nt1TVe6rqiaNqAwCAjTTyTPddSb6lu78myVlJzq6qb0hyUZJru/v0JNdO91NVZyQ5N8mjk5yd5CVV\ndZ+B9QEAwIYYFrp75sB0977TVyd5apIrpvErkjxtuv3UJHu6+67ufn+SW5I8blR9AACwUYbO6a6q\n+1TVO5J8OMkbu/uvkmzv7tumRT6UZPt0++QkH1yy+q3TGAAAHNOqu8c/SdWDk7w2yQ8leWt3P3jJ\nY3d094lV9eIkb+vuK6fxy5O8obtffci2LkhyQZJs3779sXv27Ble/7wOHDiQbdu2LbqMZd24/851\n29aZJz9o3bZ10Gbu3Wamb/PTu/np3fz0bj76Nj+9m9/u3btv6O6d865/wnoWs5Lu/nhVvTmzudq3\nV9VJ3X1bVZ2U2VnwJNmf5NQlq50yjR26rcuSXJYkO3fu7F27dg2t/Wjs3bs3m7W+8y+6Zt22te8Z\nu9ZtWwdt5t5tZvo2P72bn97NT+/mo2/z07vFGXn1kodNZ7hTVQ9I8oQkf5vk6iTnTYudl+R10+2r\nk5xbVferqtOSnJ7kulH1AQDARhl5pvukJFdMVyD5giRXdffrq+ovk1xVVc9J8oEkT0+S7r6pqq5K\ncnOSu5M8t7vvGVgfAABsiGGhu7v/JsnXLjP+0SSPX2GdS5JcMqomAABYBJ9ICQAAgwndAAAwmNAN\nAACDCd0AADCY0A0AAIMJ3QAAMJjQDQAAgwndAAAwmNANAACDCd0AADCY0A0AAIMJ3QAAMJjQDQAA\ngwndAAAwmNANAACDnbDoAmCj7LjommXH9116zgZXAgAcb5zpBgCAwYRuAAAYTOgGAIDBhG4AABhM\n6AYAgMGEbgAAGEzoBgCAwYRuAAAYTOgGAIDBhG4AABhM6AYAgMGEbgAAGOyERRcAi7bjomtWfGzf\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11851c110>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "train['y'].hist(bins=100)\n",
    "plt.title('y Distribution in Histogram')\n",
    "plt.ylabel('frequency')\n",
    "plt.xlabel('y')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here using a histogram to display frequency is a lot clearer, we see that our previous observation was correct and also it gives a better understanding of the distribution of y values. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Algorithms and Techniques\n",
    "\n",
    "I am going to use neural networks in this project in order to attempt and achieve a best possible R Squared score. For neural networks I will be using Keras and Tensorflow as backend and be using MLP as my architecture. RNN, CNNs does not seem appropriate for this example here. I will use a MLP since they are full connected layers and each feature avaliable to use should contribute on some level to the prediction of 'y' values. This is because each feature here represents an option available on the car and therefore each of these options on the car should affect the 'y' time on the testing bench on some level.\n",
    "\n",
    "Since MLPs only take numerical data I will have to OneHotEncode the categorical or object columns. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Benchmark \n",
    "For benchmark we will use the private leaderboard score on Kaggle to designate the final value. The private leaderboard score calculates 81% of the test data and therefore should give us a good idea of how well the model behaves. \n",
    "\n",
    "As mentioned I took the mean of the 'y' value in the train dataset and used it to submit on Kaggle, the rationale here is that the deviation from the mean is not dramatic and therefore could give us a fairly good indicator of a score to beat. \n",
    "\n",
    "After submission the private leaderboard score is **-0.00169** this score is clearly absolutely terrible. Although our rationale is valid we can see that our data still has enough variation where using the mean completely fails for the test data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Methodology\n",
    "#### Data Preprocessing\n",
    "\n",
    "For data preprocessing I will have to One Hot Encode the categorical columns as I have mentioned previously. I will use sklearn's preprocessing module to do this. Also I will prepare the data for model training by removing the 'ID' column and also 'y'. I decided to remove 'ID' as it is just another index. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID       y  X0  X1  X2  X3  X4  X5  X6  X8  ...   X375  X376  X377  X378  \\\n",
      "0   0  130.81  32  23  17   0   3  24   9  14  ...      0     0     1     0   \n",
      "1   6   88.53  32  21  19   4   3  28  11  14  ...      1     0     0     0   \n",
      "2   7   76.26  20  24  34   2   3  27   9  23  ...      0     0     0     0   \n",
      "3   9   80.62  20  21  34   5   3  27  11   4  ...      0     0     0     0   \n",
      "4  13   78.02  20  23  34   5   3  12   3  13  ...      0     0     0     0   \n",
      "\n",
      "   X379  X380  X382  X383  X384  X385  \n",
      "0     0     0     0     0     0     0  \n",
      "1     0     0     0     0     0     0  \n",
      "2     0     0     1     0     0     0  \n",
      "3     0     0     0     0     0     0  \n",
      "4     0     0     0     0     0     0  \n",
      "\n",
      "[5 rows x 378 columns]\n"
     ]
    }
   ],
   "source": [
    "# import LabelEncoder from sklearn to do one hot encoding for us\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "def encode_columns(x):\n",
    "    train[x] = LabelEncoder().fit_transform(train[x])\n",
    "\n",
    "#columns that need to be encoded\n",
    "hot_columns = ['X0','X1','X2','X3','X4','X5','X6','X8']\n",
    "\n",
    "for x in hot_columns:\n",
    "    encode_columns(x)\n",
    "\n",
    "print train.head()\n",
    "\n",
    "# Dropping ID so it does not skew our data later on in model training\n",
    "X_pre = train.drop('ID',1)\n",
    "\n",
    "#We drop y as it is the thing we are trying to predict\n",
    "y = train['y']\n",
    "X = X_pre.drop('y',1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below I split the train dataset into training and testing sets, this is for testing internally as the Kaggle competition does not provide the test dataset 'y' values. It is a good idea to test internally to get a benchmark of how well the model does. I decided to use a 81:19 split as this is the split they used for public and private leaderboards. Also It is because there are only ~4200 rows which is not a lot of data considering I will be using a MLP neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.19, random_state=42)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.563775899149\n"
     ]
    }
   ],
   "source": [
    "#import all modules required to create Kera's Neural Network Architecture\n",
    "from keras.models import Sequential\n",
    "from keras.wrappers.scikit_learn import KerasRegressor\n",
    "from keras.layers import Dropout, Flatten, Dense\n",
    "\n",
    "def base_model():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(376,input_shape=(376,),activation='relu'))\n",
    "    model.add(Dense(258,input_shape=(376,),activation='relu'))\n",
    "    model.add(Dense(128, input_shape = (258,),activation='relu'))\n",
    "    model.add(Dense(64, input_shape = (128,),activation='relu'))\n",
    "    model.add(Dense(32, input_shape = (64,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "\n",
    "def simple_model():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(376,input_shape=(376,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "\n",
    "def wide_model():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(752,input_shape=(376,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "def narrow_model():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(188,input_shape=(376,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "clf = KerasRegressor(build_fn=wide_model, nb_epoch=100, batch_size=25,verbose=0)\n",
    "clf.fit(X_train,y_train)\n",
    "\n",
    "#import the R2_score metric which is the same used by kaggle as well\n",
    "#this allows internal testing before submission\n",
    "from sklearn.metrics import r2_score\n",
    "score = r2_score(y_test, clf.predict(X_test))\n",
    "print score\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see above I have actually created multiple models here and decided to use the wide_model variation as it gave me the best score out of all of them. It returned a score of 0.5753 , it is important to note this is only the internal score conducted on the split. I will be comparing all the results later on to give a better idea of the improvements and so on. Obviously our final testing will be based on the kaggle scores, I think here it is important to note that even for the final submission I will still split the datasets into testing and and training based on original data. If I were to use all the data from the training csv and applied to testing csv it could lead to overfitting and also this allows me to internally score before i submit. Kaggle only allows 5 submission every 24 hours which means that it is difficult to test the true capability but this allows us to get a general idea. \n",
    "\n",
    "The score of 0.5753 is actually very good in comparison to the kaggle competitions scores on the private leaderboard. The top score achieved was 0.55551, obviously this is only internal scoring but it is good to see that our trained MLP is performing well with internal testing already. \n",
    "\n",
    "Next I will be attempting to use f_regression to select features and narrow down the amount of total inputs, I believe this will improve the score as there may be noise in the data and irrelevant data. Using f_regression I hope to find all the variables that matter most to the prediction methodology. I have selected f_regression as it is test of significance in a regression analysis, we are attempting to eliminate noise and also we are doing a regression analysis which i thought would be suitable for our use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Ryan/anaconda/lib/python2.7/site-packages/sklearn/feature_selection/univariate_selection.py:279: RuntimeWarning: invalid value encountered in divide\n",
      "  corr /= row_norms(X.T)\n",
      "/Users/Ryan/anaconda/lib/python2.7/site-packages/scipy/stats/_distn_infrastructure.py:879: RuntimeWarning: invalid value encountered in greater\n",
      "  return (self.a < x) & (x < self.b)\n",
      "/Users/Ryan/anaconda/lib/python2.7/site-packages/scipy/stats/_distn_infrastructure.py:879: RuntimeWarning: invalid value encountered in less\n",
      "  return (self.a < x) & (x < self.b)\n",
      "/Users/Ryan/anaconda/lib/python2.7/site-packages/scipy/stats/_distn_infrastructure.py:1818: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= self.a)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import f_regression\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "\n",
    "f_reg = SelectKBest(f_regression, k=64)\n",
    "analysis_f = f_reg.fit(X,y)\n",
    "\n",
    "X_new = f_reg.fit_transform(X, y)\n",
    "\n",
    "#Load the analysis into a variable so we can use it later to apply on our final testing set\n",
    "analysis=  analysis_f.get_support()\n",
    "analysis.shape\n",
    "\n",
    "#split the data as usual for training and internal testing\n",
    "X_new_train, X_new_test, y_train, y_test = train_test_split(X_new, y.as_matrix(), test_size=0.19, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.581713838673\n"
     ]
    }
   ],
   "source": [
    "def simple_model_new():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(32,input_shape=(64,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "\n",
    "def base_model_new():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(128,input_shape=(64,),activation='relu'))\n",
    "    model.add(Dense(258,input_shape=(128,),activation='relu'))\n",
    "    model.add(Dense(128, input_shape = (258,),activation='relu'))\n",
    "    model.add(Dense(64, input_shape = (128,),activation='relu'))\n",
    "    model.add(Dense(32, input_shape = (64,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "def multi_connected_new():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(128,input_shape=(64,),activation='relu'))\n",
    "    model.add(Dense(64,input_shape=(128,),activation='relu'))\n",
    "    model.add(Dense(16,input_shape=(64,),activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(loss='mean_squared_error',optimizer ='adam')\n",
    "    return model\n",
    "\n",
    "clf2 = KerasRegressor(build_fn=multi_connected_new, nb_epoch=1000, batch_size=5,verbose=0)\n",
    "clf2.fit(X_new_train,y_train)\n",
    "score = r2_score(y_test, clf2.predict(X_new_test))\n",
    "print score\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above we see the implementation of our f_regression, I have selected 64 features to select. Given that we have 376 features I believe this reduction will remove a lot of noise. I have attempted to use more and less features but 64 seems to be a sweet spot to increase our model's accuracy. \n",
    "\n",
    "As for the implementation of MLP and prediciton we use a different model, i attempted to use the same model but it did not optimize for a higher score. Now we are able to reach a score of 0.58669 which is quite a bit higher than our standard model. We use a 3 layer model here in comparison to the one layer model previously, this is because with the reduction of features there is probably more information we are able to retrieve using more layers, and also with 300+ features if we used many layered model the computational time will be much higher but with lower number of features we can reduce our computational time. I tried to keep the layers low as well to reduce overfitting on some level. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4209, 64)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#One hot encode the test csv\n",
    "def encode_columns_final(x):\n",
    "    test[x] = LabelEncoder().fit_transform(test[x])\n",
    "for x in hot_columns:\n",
    "    encode_columns_final(x)\n",
    "\n",
    "\n",
    "dtest = test.drop('ID',1)\n",
    "\n",
    "#Drop features using our f_regression analysis\n",
    "dtest_new = dtest.loc[:, analysis]\n",
    "\n",
    "\n",
    "print dtest_new.shape\n",
    "\n",
    "type(dtest_new)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Predict using both our models \n",
    "pred = clf.predict(dtest.as_matrix())\n",
    "pred2 = clf2.predict(dtest_new.as_matrix())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Output of the submission for kaggle \n",
    "\n",
    "submission = pd.DataFrame()\n",
    "submission2 = pd.DataFrame()\n",
    "s = pd.Series(pred)\n",
    "s2 = pd.Series(pred2)\n",
    "idt = pd.Series(test['ID'])\n",
    "\n",
    "\n",
    "submission['ID'] = idt\n",
    "submission['y'] = s\n",
    "\n",
    "submission2['ID'] = idt\n",
    "submission2['y'] = s2\n",
    "\n",
    "submission.to_csv('submission.csv',index=False)\n",
    "submission2.to_csv('submission2.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Results\n",
    "\n",
    "|Model|Internal Test|Public Leaderboard|Private Leaderboard|\n",
    "|:----|------------:|-----------------:|------------------:|\n",
    "|dummy| N/A         | -0.00039         | -0.00169          |\n",
    "|base |0.575390     |0.51064           |0.51341            |\n",
    "|reduced |0.586690    |0.52723          |0.52027           |\n",
    "\n",
    "We can see that above results, clearly our final reduced model scored the highest overall in all test, whilst base model performed 2nd and the dummy test performed last. \n",
    "\n",
    "This is a result that I believe proved our model was succesful in the first place and also the f_regression we did improved our final score and it was not just due to overfitting. Although we see that our internal testing scored much higher than both public and private leaderboard scores, this could mean that we are still overfitting on some level. The different in internal test and the leaderboard scores could also be attributed to the lack of internal testing data we had. In the end we only had a very minimal amount of data to test on, we could not have more internal testing as this would leave very little training data for our model. \n",
    "\n",
    "I believe our model was succesful in comparison to the top score on kaggle which is 0.55551 for the private leaderboard we are still quite a ways away from the perfect solution. I have used private leaderboard for the comparison as a lot of public leaderboard top scorers fell a lot in ranking due to them overfitting to public leaderboard's data. I believe our model is still valid as we came relatively close to what people achieved, others used different Machine Learning techniques such as XGboost and boosted trees to achieve their score but it is good to see that with MLPs we are able to reach similar levels of accuracy in prediction. \n",
    "\n",
    "Note: Scores vary a little each time it is run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "\n",
    "In this project clearly there was many ways of improvements even using the method I have chosen. The architecture of the Neural Networks was probably one of the most difficult things to construct, there is no any guidelines of how neural networks should be constructed with the data although and it is more of a guessing game of how the architectures to look like, there are too many variables here in order to get the best possible score. I believe with enough testing and trial and error you could achieve a much greater score using MLP but there are essentially infinite varaiations of layers to consider which is one of the biggest issue with using MLPs on such projects or essentially any Neural Networks. There is no clear understanding of how to efficently architect the best neural network for a problem, which would be another interesting area to explore. \n",
    "\n",
    "Another issue is feature selection, there is no clear idea of what each of these features represent they are just data in the end and no additional information is given. This clearly is an issue in the end, if there is some sort of understanding what each feature is it is possible to pick the best possible features without using f_regression. Alot of these things may be more intuitive to pick in the end to achieve the best possible results. \n",
    "\n",
    "In the end I believe the biggest improvement that can be introduced would be more time, the variations of feature selection and model architect is essentialy infinite. With enough time you could construct a perfect model to capture everything perfectly. As mentioned earlier the biggest improvement would probably come as the better understanding of the features as this would give some logical reasoning and understanding of the underlying problem. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
